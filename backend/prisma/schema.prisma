// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String?  @unique
  phone        String?  @unique
  firstName    String
  lastName     String
  avatar       String?
  passwordHash String?
  isOnboarded  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  enrollments  Enrollment[]
  progress     LessonProgress[]
  quizAttempts QuizAttempt[]
  certificates Certificate[]

  @@map("users")
}

model Course {
  id            String   @id @default(uuid())
  title         String
  description   String
  thumbnailUrl  String?
  level         String   @default("Beginner") // Beginner, Intermediate, Advanced
  duration      Int      @default(0) // in minutes
  studentsCount Int      @default(0)
  rating        Float    @default(0)
  category      String   @default("General")
  tags          String[] // Array of tags
  isPublished   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Instructor info (embedded for simplicity)
  instructorName   String
  instructorAvatar String?

  // Relations
  lessons      Lesson[]
  enrollments  Enrollment[]
  quizzes      Quiz[]
  certificates Certificate[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(uuid())
  courseId    String
  title       String
  description String
  type        String   // video, pdf, text
  videoUrl    String?
  pdfUrl      String?
  content     String?
  duration    Int?     // in minutes
  order       Int
  createdAt   DateTime @default(now())

  // Relations
  course   Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress LessonProgress[]

  @@map("lessons")
}

model Enrollment {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Quiz {
  id           String   @id @default(uuid())
  courseId     String
  title        String
  description  String
  timeLimit    Int?     // in minutes
  passingScore Int      // percentage
  maxAttempts  Int      @default(3)
  createdAt    DateTime @default(now())

  // Relations
  course   Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id             String   @id @default(uuid())
  quizId         String
  question       String
  type           String   // multiple-choice, single-choice
  options        String[] // Array of options
  correctAnswers Int[]    // indices of correct options
  explanation    String?
  order          Int

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model QuizAttempt {
  id          String    @id @default(uuid())
  quizId      String
  userId      String
  answers     String    // JSON string of answers
  score       Int
  passed      Boolean
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Certificate {
  id             String   @id @default(uuid())
  courseId       String
  userId         String
  courseName     String
  studentName    String
  completedAt    DateTime
  certificateUrl String?
  createdAt      DateTime @default(now())

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("certificates")
}

model Category {
  id          String @id @default(uuid())
  name        String @unique
  description String
  courseCount Int    @default(0)
  createdAt   DateTime @default(now())

  @@map("categories")
}